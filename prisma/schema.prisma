generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid()) // internal id
  userId   String @unique // external id from auth provider
  name     String
  imageUrl String
  email    String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  stores Store[]
}

model Logo {
  id        String       @id @default(cuid())
  name      String
  key       String       @unique
  url       String       @db.Text
  status    UploadStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  store   Store?  @relation("StoreLogo", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId String? @unique

  @@index([storeId])
}

model Banner {
  id        String       @id @default(cuid())
  name      String
  key       String       @unique
  url       String       @db.Text
  status    UploadStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  store   Store?  @relation("StoreBanner", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId String? @unique

  @@index([storeId])
}

model City {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  state       String
  imgUrl      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stores Store[]

  @@index([active])
}

model Store {
  id          String    @id @default(cuid())
  name        String    @unique
  description String    @db.Text
  address     String
  phone       String
  slug        String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  userId       String
  user         User          @relation(fields: [userId], references: [userId])
  logo         Logo?         @relation("StoreLogo")
  banner       Banner?       @relation("StoreBanner")
  products     Product[]
  payments     Payment[]
  subscription Subscription?
  status       Status        @default(ACTIVE)
  cityId       String
  city         City          @relation(fields: [cityId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([cityId])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  price       Int
  description String    @db.Text
  category    Category  @default(Comida)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId], name: "storeId")
}

model Payment {
  id              String   @id @default(cuid())
  paymentId       String   @unique
  storeId         String   @unique
  store           Store    @relation(fields: [storeId], references: [id])
  status          String
  merchantOrderId String
  amount          Float
  paymentMethod   String
  metadata        Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([storeId])
  @@index([paymentId])
}

model Subscription {
  id        String             @id @default(cuid())
  storeId   String             @unique
  planType  PlanType
  status    SubscriptionStatus @default(INACTIVE)
  startDate DateTime           @default(now())
  expiresAt DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  store Store @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Category {
  Comida
  Bebida
  Postre
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum PlanType {
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PENDING
}
