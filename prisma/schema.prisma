// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  stores Store[]
}

model Logo {
  id   String @id @default(cuid())
  name String
  key  String
  url  String

  status UploadStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   Int?

  @@index([storeId])
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  address     String    @db.Text
  phone       String
  slug        String?   @unique
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  userId       String
  user         User          @relation(fields: [userId], references: [userId])
  products     Product[]
  payments     Payment[]
  subscription Subscription?
  status       Status        @default(ACTIVE)
  city         City          @default(corrientes)
  logoUrl      String?       @db.Text
  bannerUrl    String?       @db.Text

  @@index([userId])
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Int
  description String
  category    Category  @default(Comida)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  storeId     Int
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId], name: "storeId")
}

model Payment {
  id              Int      @id @default(autoincrement())
  paymentId       String   @unique
  storeId         Int
  store           Store    @relation(fields: [storeId], references: [id])
  status          String
  merchantOrderId String
  amount          Float
  paymentMethod   String
  metadata        Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([storeId])
  @@index([paymentId])
}

model Subscription {
  id        Int                @id @default(autoincrement())
  storeId   Int                @unique
  store     Store              @relation(fields: [storeId], references: [id])
  planType  PlanType
  status    SubscriptionStatus @default(INACTIVE)
  startDate DateTime           @default(now())
  expiresAt DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([storeId])
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Category {
  Comida
  Bebida
  Postre
}

enum City {
  corrientes
  cordoba
  buenos_aires
  ushuaia
  posadas
  puerto_iguazu
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum PlanType {
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PENDING
}
